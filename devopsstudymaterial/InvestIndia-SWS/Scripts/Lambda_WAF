import boto3
import json
import time
from datetime import datetime, timedelta

REGION_NAME = 'ap-south-1'

athena_client = boto3.client('athena', region_name=REGION_NAME)
sns_client = boto3.client('sns', region_name=REGION_NAME)

DATABASE_NAME = 'default'
TABLE_NAME = 'test_waf_logs'
EMAIL_SNS_TOPIC_ARN = 'arn:aws:sns:ap-south-1:204184355380:testing'
current_date = datetime.utcnow().strftime('%Y/%m/%d')
LOCATION = 's3://aws-waf-logs-sws/AWSLogs/204184355380/WAFLogs/cloudfront/WAF_Block/{current_date}/'
OUTPUT_LOCATION = 's3://test-bucket-sws/'


def execute_athena_query(query, output_location):
    response = athena_client.start_query_execution(
        QueryString=query,
        QueryExecutionContext={'Database': DATABASE_NAME},
        ResultConfiguration={'OutputLocation': output_location}
    )
    return response['QueryExecutionId']

def is_query_finished(query_execution_id):
    query_status = athena_client.get_query_execution(QueryExecutionId=query_execution_id)
    status = query_status['QueryExecution']['Status']['State']
    return status in ['SUCCEEDED', 'FAILED', 'CANCELLED']

def lambda_handler(event, context):

    create_table_query = f"""
    CREATE EXTERNAL TABLE `${TABLE_NAME}`(
        `timestamp` BIGINT,
        `action` STRING,
        `httprequest` struct <
                        clientip: string,
                        headers: array <
                                    struct <
                                        name: string,
                                        value: string
                                          >
                                     >
                          >
    )
    ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
    STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat'
    OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
    LOCATION '{LOCATION}';
    """


    def send_alert_to_sns(ip_list, uri_list):
        sns_message = f"IPs with counts beyond 1500:\n{json.dumps(ip_list, indent=4)}\n\nURIs with counts beyond 1500:\n{json.dumps(uri_list, indent=4)}"
        sns_subject = "WAF Log Analysis Alert"
        sns_client.publish(TopicArn=EMAIL_SNS_TOPIC_ARN, Message=sns_message, Subject=sns_subject)

    query_execution_table = execute_athena_query(create_table_query, OUTPUT_LOCATION)
    while not is_query_finished(query_execution_table):
        time.sleep(5)
    query_table_results = athena_client.get_query_results(QueryExecutionId=query_execution_table)

    query = f"""
    SELECT httprequest.clientip, 
           header.value, 
           COUNT(*) as count
    FROM test_waf_logs
    CROSS JOIN UNNEST(httprequest.headers) AS t(header)
    WHERE LOWER(header.name) = 'host' AND from_unixtime(timestamp/1000) > now() - interval '15' minute
    GROUP BY httprequest.clientip, header.value
    ORDER BY count DESC
    LIMIT 5;
    """

    query_execution = execute_athena_query(query, OUTPUT_LOCATION)
    while not is_query_finished(query_execution):
        time.sleep(5)
    query_results = athena_client.get_query_results(QueryExecutionId=query_execution)

    records = query_results['ResultSet']['Rows'][1:]
    extracted_data = [
    {
        'clientip': record['Data'][0]['VarCharValue'],
        'host': record['Data'][1]['VarCharValue'],
        'uri': record['Data'][3]['VarCharValue'],
        'count': int(record['Data'][2]['VarCharValue'])
    } for record in records
]

    high_count_ips = [item['clientip'] for item in extracted_data if item['count'] > 100]
    high_count_uris = [f"{item['uri']} ({item['count']} hits)" for item in extracted_data if item['count'] > 1500]

    if high_count_ips or high_count_uris:
        send_alert_to_sns(high_count_ips, high_count_uris)

    sns_message = json.dumps(extracted_data, indent=4)
    sns_subject = "WAF Log Analysis Report"
    sns_client.publish(TopicArn=EMAIL_SNS_TOPIC_ARN, Message=sns_message, Subject=sns_subject)

    return {
        'statusCode': 200,
        'body': 'Successfully executed and sent data to SNS for email.'
    }

if __name__ == '__main__':
    lambda_handler({}, {})

